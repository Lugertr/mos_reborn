# postprocessing/text_norm.py
"""
Purpose
-------
Нормализация и «очистка» текста после OCR.

Что делаем:
- Приводим Unicode к канонической форме NFC (комбинируем составные символы).
- Сводим любые последовательности пробельных символов к одному пробелу.
- Удаляем лидирующие/хвостовые пробелы.

Used by
-------
Этап сборки сегментов и расчёта WER, чтобы сравнения шли по «аккуратному» тексту.
"""

import unicodedata as ud
import re

# Предкомпилированное регулярное выражение:
# \s+ — любая подряд идущая группа пробельных символов (пробел/таб/перевод строки и т.п.)
_spaces_re = re.compile(r"\s+")

def nfc(s: str) -> str:
    """
    Привести строку к канонической форме Unicode NFC.

    Args:
        s: Исходная строка (может быть пустой или None-подобной).

    Returns:
        Строка в нормализованной форме NFC. Для пустых значений вернёт "".

    Notes:
        NFC объединяет базовые буквы и диакритические знаки в единый кодовый пункт.
        Это помогает избежать «ложных» различий при сравнении и расчёте метрик.
    """
    return ud.normalize("NFC", s or "")

def clean_spaces(s: str) -> str:
    """
    Нормализовать пробелы: заменить все последовательности пробелов на один пробел и обрезать края.

    Args:
        s: Входная строка.

    Returns:
        Очищенная строка: NFC-нормализованная, с одиночными пробелами и без лидирующих/хвостовых.

    Example:
        "  Привет,\\n\\tмир!  "  →  "Привет, мир!"
    """
    s = nfc(s)
    s = _spaces_re.sub(" ", s).strip()
    return s
